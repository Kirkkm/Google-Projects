#!/usr/bin/env python3
#cars.py
import json
import locale
import sys


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  most_sales = 0
  popular_year = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # TODO: also handle max sales
    # This will compare all of the total sales of the cars
    # and only save the largest number of sales
    item_sales = int(item["total_sales"])
    if item_sales > most_sales:
      most_sales = item_sales
      most_sold_car = item

    # TODO: also handle most popular car_year
    # create a new dictionary where the key is the based on the car year
    # and the value is the added up sales
    item_year = item["car"]["car_year"]
    if item_year not in popular_year.keys():
      popular_year[item_year] = item_sales
    else:
      popular_year[item_year] += item_sales

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
      format_car(most_sold_car["car"]), most_sold_car["total_sales"]),
    "The most popular year was {} with {} sales.".format(
      max(popular_year, key=popular_year.get), max(popular_year.values()))
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("../car_sales.json")
  summary = process_data(data)
  print(summary)

  # TODO: turn this into a PDF report
  from .reports import generate
  table_data = cars_dict_to_table(data)

  # pdf generator method
  # (filename, title, additional_info, table_data)
  PDF_summary = '<br/>'.join(summary)
  print (PDF_summary)
  generate("/tmp/cars.pdf", "Sales summary for last month", PDF_summary, table_data)

  # TODO: send the PDF report as an email attachment
  # import the methods we need from emails.py to generate and send the email
  from .emails import generate
  from .emails import send

  # email generator method
  # generate(sender, recipient, subject, body, attachment_path)
  email_summary = '\n'.join(summary)
  print (email_summary)
  email = generate(sender, recipient, "Sales summary for last month", email_summary, "/tmp/cars.pdf")

  # email send method
  # send(message)
  send(email)

if __name__ == "__main__":
  main(sys.argv)
